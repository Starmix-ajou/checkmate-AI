# Test 진행 내용 순서대로 나열

# Redis 초기화 및 dummy 데이터 생성 (해당 커맨드는 테스트 끝까지 다시 입력하면 안 됨 !!!! 초기화됨..)
python redis-dummy.py

# 전체 description 배열 정상적으로 존재하는지 "/project/definition"의 매 Step 마다 확인
redis-cli GET email:test@test.com | jq '.description'


#//--------------------------------------------------------------//

# PUT /project/definition 테스트 (1)
curl -X PUT http://localhost:8000/project/definition \
  -H "Content-Type: application/json" \
  -d '{
    "email": "test@test.com",
    "feedback": "이대로 좋습니다"
  }'

=> 터미널에 "features": [...=기존 description], "isNextStep": 0 반환되는지 확인

# PUT /project/definition 테스트 (2)
curl -X PUT http://localhost:8000/project/definition \
  -H "Content-Type: application/json" \
  -d '{
    "email": "test@test.com",
    "feedback": "광고 배너 표시 기능 추가해줘"
  }'

=> 터미널에 "features": ["광고 배너 표시 기능"], "isNextStep": 1 반환되는지 확인
=> description 배열에 "광고 배너 표시 기능"이 존재하는지 커맨드로 확인
    : redis-cli GET email:test@test.com | grep "광고 배너"

#//--------------------------------------------------------------//




# POST /project/specification 테스트
curl -X POST http://localhost:8000/project/specification \
  -H "Content-Type: application/json" \
  -d '{"email": "test@test.com"}'

=> 터미널에 프로젝트 정보, 프롬프트 정보, GPT 응답, Redis에 저장된 데이터가 차례대로 잘 반환되는지 확인

#//--------------------------------------------------------------//

# 전체 features 배열 정상적으로 존재하는지 "/project/specification"의 매 Step 마다 확인
redis-cli GET email:test@test.com | jq '.features'

# PUT /project/specification 테스트 (1)
curl -X PUT http://localhost:8000/project/specification \
  -H "Content-Type: application/json" \
  -d '{
    "email": "test@test.com",
    "feedback": "광고 배너 표시 기능의 우선수위를 제일 낮게 변경해줘"
  }'

# PUT /project/specification 테스트 (2)
curl -X PUT http://localhost:8000/project/specification \
  -H "Content-Type: application/json" \
  -d '{
    "email": "test@test.com",
    "feedback": "좋아요. 이제 피드백 끝"
  }'

#//--------------------------------------------------------------//